libary(tensorboard())
libary(tensorflow)
library(tensorflow)
train <- function() {
# load data
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
# reshape
x_train <- x_train /255
x_test <- x_test /255
dim(x_train) <- c(60000, 28, 28, 1)
dim(x_test) <- c(10000, 28, 28, 1)
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
# model
model <- keras_model_sequential()
model %>%
layer_conv_2d(kernel_size = c(3, 3), filters = 32, activation = "relu") %>%
layer_conv_2d(kernel_size = c(3, 3), filters = 64, activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.25) %>%
layer_flatten() %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 10, activation = "softmax")
model %>% compile(loss = "categorical_crossentropy", optimizer = optimiser_adadelta(), metrics = c("accuracy")) # nolint
# train
history <- model %>% fit(x_train, y_train, batch_size = 128, epochs = 10, validation_split = 0.2) # nolint
# save model
save_model_hdf5(model, "model.h5")
}
# model predict
predict <- function() {
# load model
model <- load_model_hdf5("model.h5")
# load data
mnist <- dataset_mnist()
x_test <- mnist$test$x
y_test <- mnist$test$y
y_train <- to_categorical(y_train, 10)
x_train <- x_train / 255
dim(x_train) <- c(60000, 24, 24, 1)
x_width <- to_categorical(x_train, 10000)
y_width <- to_categorical(x_train, 144) #no-lint
X_train_width <- mnist(to_categorical(x_train, 233)) #no-lint
# reshape
x_test <- x_test / 255
dim(x_test) <- c(10000, 24, 24, 1)
dim(y_train) <- to_categorically(y_train, 1) # nolint
y_test <- to_categorical(y_test, 10)
# predict
model %>% evaluate(x_test, y_test)
}
train()
use_python()
use_python("/usr/local/bin/python")
train()
tensorflow::tf_config()
install_tensorflow()
library(keras)
mnist <- dataset_mnist()
mnist <- dataset_mnist()
library(tensorflow)
install_tensorflow()
clear
library(tensorflow)
install_tensorflow()
library(tensorflow)
install_tensorflow()
use_condaenv("r-reticulate")
library(reticulate)
mnist <- dataset_mnist()
sys <- import("sys")
Sys.which(python)
Sys.which("python")
reticulate::conda_list()
reticulate::conda_list()
reticulate::use_condaenv(/Users/abdul/opt/miniconda3/envs/r-reticulate)
reticulate::use_condaenv("/Users/abdul/opt/miniconda3/envs/r-reticulate")
Sys.which("python")
library(reticulate)
library(tensorflow)
install_tensorflow()
library(tensorflow)
install_tensorflow()
+ conda install anaconda-client
library(keras)
library(tensorflow)
install_keras()
events <- read.csv("~/Desktop/Programming/R-Programming/events.csv")
events <- read.csv("/Users/abdul/Desktop/Programming/R Programs")
events <- read.csv("/Users/abdul/Desktop/Programming/R Programs/events.csv")
events <- read.csv("/Users/abdul/Desktop/Programming/R Programs/events.csv")
events
events <- read.csv("/Users/abdul/Desktop/Programming/R Programs/events.csv")
events
typeof(events)
events <- read.csv("/Users/abdul/Desktop/Programming/R Programs/events.csv")
events
class(events)
events$event2
events[ ,2]
events[ ,3]
events[ ,3[3]]
events[ ,3(3)]
events[3,3]
events[3,4]
events[1:2, ]
events[, 1:3]
events[, 1:4]
events[, 1:4] %>% summarise_all(sum)
events[, 1:9]
events[, 1:9] %>% summarise_all(sum)
library(dplyr)
events[, 1:9]
events[, 1:9] %>% summarise_all(sum)
library(dplyr)
events[, 1:9]
events[2, 1:9] %>% summarise_all(sum)
library(dplyr)
events[, 1:9]
events[, 2:9] %>% summarise_all(sum)
library(dplyr)
events[, 1:9]
events[, 2:9] %>% rowSums()
library(dplyr)
events[, 1:9]
x <- events[, 2:9] %>% rowSums()
library(dplyr)
events[, 1:9]
x <- events[, 2:9] %>% rowSums()
events[1, x]
library(dplyr)
events[, 1:9]
x <- events[, 2:9] %>% rowSums()
library(dplyr)
events[, 1:9]
x <- events[, 2:9] %>% rowSums()
table <- data.frame(events[,1], x)
table
library(dplyr)
events[, 1:9]
total_score <- events[, 2:9] %>% rowSums()
table <- data.frame(events[,1], total_score)
table
events <- events %>% rownames_to_column("name")
library(tidyverse)
events <- events %>% rownames_to_column("name")
library(tidyverse)
events <- events %>% rownames_to_column("names")
head(events)
library(tidyverse)
events[, 1:3] %>% rownames_to_column("names")
library(tidyverse)
events[, 1:3] %>% rownames_to_column("nam")
events <- read.csv("/Users/abdul/Desktop/Programming/R Programs/events.csv")
events
class(events)
library(tidyverse)
events[, 1:3] %>% rownames_to_column("names")
library(tidyverse)
events[, 1] <- NULL
events[, 1:3] %>% rownames_to_column("name")
events <- read.csv("/Users/abdul/Desktop/Programming/R Programs/events.csv")
events
class(events)
events[events$event3 > 0, 1]
events[, 1:3] %>% rowSums() %>% mean()
events[, 2:3] %>% rowSums() %>% mean()
total_score <- events[, 2:9] %>% rowSums()
mean <- mean(total_score)
events[total_score > mean, 1]
install.packages(MASS)
install.packages("MASS")
library(MASS)
library(MASS)
structure(survey)
class(survey)
typeof(survey)
row_number(survey)
column_number(survey)
row_number(survey)
dim(survey)
nrow <- function(x) dim(x)[1]
ncol <- function(x) dim(x)[2]
nrow(survey)
ncol(survey)
nrow <- function(x) dim(x)[1]
ncol <- function(x) dim(x)[2]
print("Number of rows in the survey dataset: " + nrow(survey))
nrow <- function(x) dim(x)[1]
ncol <- function(x) dim(x)[2]
print("Number of rows in the survey dataset: ", nrow(survey))
nrow <- function(x) dim(x)[1]
ncol <- function(x) dim(x)[2]
print("Number of rows in the survey dataset: " nrow(survey))
nrow <- function(x) dim(x)[1]
ncol <- function(x) dim(x)[2]
cat("Number of rows in the survey dataset: ", nrow(survey))
cat("Number of columns in the survey dataset: ", ncol(survey))
nrow <- function(x) dim(x)[1]
ncol <- function(x) dim(x)[2]
cat("Number of rows in the survey dataset: /n", nrow(survey))
cat("Number of columns in the survey dataset: ", ncol(survey))
nrow <- function(x) dim(x)[1]
ncol <- function(x) dim(x)[2]
cat("Number of rows in the survey dataset: ", nrow(survey))
cat("Number of columns in the survey dataset: ", ncol(survey))
nrow <- function(x) dim(x)[1]
ncol <- function(x) dim(x)[2]
cat("Number of rows in the survey dataset: ", nrow(survey))
cat(/n)
nrow <- function(x) dim(x)[1]
ncol <- function(x) dim(x)[2]
cat("Number of rows in the survey dataset: ", nrow(survey))
cat("/n")
cat("Number of columns in the survey dataset: ", ncol(survey))
nrow <- function(x) dim(x)[1]
ncol <- function(x) dim(x)[2]
cat("Number of rows in the survey dataset: ", nrow(survey))
cat("Number of columns in the survey dataset: ", ncol(survey))
nrow <- function(x) dim(x)[1]
ncol <- function(x) dim(x)[2]
cat("Number of rows in the survey dataset: \n", nrow(survey))
cat("Number of columns in the survey dataset: ", ncol(survey))
nrow <- function(x) dim(x)[1]
ncol <- function(x) dim(x)[2]
cat("Number of rows in the survey dataset: ", nrow(survey))
cat("\nNumber of columns in the survey dataset: ", ncol(survey))
dim(survey)
summary(survey)
colnames(survey)
survey[1:3, ]
tail(survey, 2)
total_score <- events[, 2:9] %>% rowSums()
mean <- mean(total_score)
events[total_score > mean, 1]
library(MASS)
total_score <- events[, 2:9] %>% rowSums()
mean <- mean(total_score)
events[total_score > mean, 1]
unlink("Desktop/Programming/R Programs/20BRS1185_Abdul_Lab7_L19-L20_cache", recursive = TRUE)
events[events[, 2:9] %>% rowSums() > mean(events[, 2:9] %>% rowSums()), 1]
knit_with_parameters("~/Desktop/Programming/R Programs/20BRS1185_Abdul_Lab7_L19-L20.Rmd")
events <- read.csv("/Users/abdul/Desktop/Programming/R Programs/events.csv")
events
class(events)
events$event2
events[ ,3]
events[3,4]
events[1:2, ]
library(dplyr)
events[, 1:9]
total_score <- events[, 2:9] %>% rowSums()
table <- data.frame(events[,1], total_score)
table
library(tidyverse)
events[, 1] <- NULL
events[, 1:3] %>% rownames_to_column("name")
events[events$event3 > 0, 1]
events[events[, 2:9] %>% rowSums() > mean(events[, 2:9] %>% rowSums()), 1]
events <- read.csv("/Users/abdul/Desktop/Programming/R Programs/events.csv")
events
class(events)
events[events[, 2:9] %>% rowSums() > mean(events[, 2:9] %>% rowSums()), 1]
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
library(MASS)
structure(survey)
class(survey)
typeof(survey)
library(MASS)
class(survey)
typeof(survey)
nrow <- function(x) dim(x)[1]
ncol <- function(x) dim(x)[2]
cat("Number of rows in the survey dataset: ", nrow(survey))
cat("\nNumber of columns in the survey dataset: ", ncol(survey))
library(MASS)
dim(survey)
summary(survey)
colnames(survey)
survey[1:3, ]
tail(survey, 2)
events <- read.csv("/Users/abdul/Desktop/Programming/R Programs/events.csv")
events[events[, 2:9] %>% rowSums() > mean(events[, 2:9] %>% rowSums()), 1]
events <- read.csv("/Users/abdul/Desktop/Programming/R Programs/events.csv")
events[events[, 2:9] %>% rowSums() > mean(events[, 2:9] %>% rowSums()), 1]
events <- read.csv("/Users/abdul/Desktop/Programming/R Programs/events.csv")
events[events[, 2:9] %>% rowSums() > mean(events[, 2:9] %>% rowSums()), 1]
events[events[, 2:9] %>% rowSums() > mean(events[, 2:9] %>% rowSums()), 1]
events <- read.csv("/Users/abdul/Desktop/Programming/R Programs/events.csv")
events
class(events)
events[events[, 2:9] %>% rowSums() > mean(events[, 2:9] %>% rowSums()), 1]
library(dplyr)
events[events[, 2:9] %>% rowSums() > mean(events[, 2:9] %>% rowSums()), 1]
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
install.packages("tesseract")
install.packages
install.packages("tesseract")
install.packages("tesseract")
install.packages("tesseract")
library(tesseract)
text <- ocr("IMG_4826.png")
text <- ocr("/Users/abdul/Desktop/Programming/R Programs")
text <- ocr("/Users/abdul/Desktop/Programming/R Programs/IMG_4826.png")
text <- ocr("/Users/abdul/Desktop/Programming/R Programs/ocr.png")
text <- ocr("/Users/abdul/Desktop/Programming/R Programs/ocr.png")
text <- ocr("/Users/abdul/Desktop/Programming/R Programs/ocr.png")
library(keras)
library(tensorflow)
keras_model_custom()
getwd()
setwd("/Users/abdul/Desktop/Programming/R Programs")
getwd()
library(MASS)
new <- na.exclude(survey)
new
range(new$Age)
seq(18, 30, 10)
rangeAge <- seq(17, 70, 10)
rangeAge <- seq(17, 70, 10)
rangeAge
table(cut(new$Age, seq(17, 70, 10), right = FALSE))
max(table(cut(new$Age, seq(17, 70, 10), right = FALSE)))
max(table(cut(new$Age, seq(17, 70, 10), right = FALSE))[1])
table(cut(new$Age, seq(17, 70, 10), right = FALSE))[1]
table(cut(new$Age, seq(17, 70, 10), right = FALSE))[max()]
table(cut(new$Age, seq(17, 70, 10), right = FALSE))[max]
table(cut(new$Age, seq(17, 70, 10), right = FALSE))[1]
table(cut(new$Wr.Hnd, seq(0, 100, 10), right = FALSE))
table(cut(new$Wr.Hnd, seq(0, 100, 10), right = FALSE))/nrow(new)
decP <- table(cut(new$Wr.Hnd, seq(0, 100, 10), right = FALSE))/nrow(new)
sprintf(decP, fmt='%.3f')
mean(new$Age)
sd(new$Height)
sd(new$Height)
var(new$Height)
quantile(new$Wr.Hnd)
cor(new$Wr.Hnd, new$Pulse)
aggregate(new$Age, by = list(new$Exer), FUN = mean)
aggregate(new$Height, by = list(new$N.Hnd), FUN = sd)
summary(new$Pulse)
sd <- aggregate(new$Height, by = list(new$N.Hnd), FUN = sd)
sd <- aggregate(new$Height, by = list(new$N.Hnd), FUN = sd)
sd(new$Height, na.rm = TRUE)
aggregate(new$Height, by = list(new$Nw.Hnd), FUN = sd)
sd(new$Height, by = list(new$Nw.Hnd))
sd(new$Height, new$Nw.Hnd)
aggregate(new$Height, by = list(new$Nw.Hnd), FUN = sd)
aggregate(new, by = list(
x = cut(new$Nw.Hnd, seq(0, 100, 10), right = FALSE)
), FUN = sd)
aggregate(new, by = list(
x = new$Height,
y = new$NW.Hnd), FUN = sd)
aggregate(new$Height, by = list(new$Nw.Hnd), FUN = sd)
aggregate(new$Nw.Hnd, by = list(new$Height), FUN = sd)
aggregate(new$Nw.Hnd, by = list(new$Height), FUN = sd)
aggregate(new$Height, by = list(new$Nw.Hnd), FUN = sd)
da <- aggregate(new$Height, by = list(new$Nw.Hnd), FUN = sd)
aggregate(new$Height, by = list(new$Nw.Hnd), FUN = sd)
# category 1
sd(new$Height[new$Nw.Hnd < 18])
# category 2
sd(new$Height[new$Nw.Hnd >= 18 & new$Nw.Hnd < 20])
# category 3
sd(new$Height[new$Nw.Hnd >= 20 & new$Nw.Hnd < 22])
# category 4
sd(new$Height[new$Nw.Hnd >= 22 & new$Nw.Hnd < 24])
# category 5
sd(new$Height[new$Nw.Hnd >= 24])
# category 1
sd(new$Height[new$Nw.Hnd < 18])
# category 2
sd(new$Height[new$Nw.Hnd >= 18 & new$Nw.Hnd < 20])
# category 3
sd(new$Height[new$Nw.Hnd >= 20 & new$Nw.Hnd < 22])
# category 4
sd(new$Height[new$Nw.Hnd >= 22 & new$Nw.Hnd < 24])
# category 5
sd(new$Height[new$Nw.Hnd >= 24])
new$Nw.Hand <- cut(new$Nw.Hand, seq(0, 100, 10), right = FALSE)
new$Nw.Hand <- cut(as.matrix(new$Nw.Hand.1[,paste(i, 0:1 ,sep=".")]), seq(0, 100, 10), right = FALSE)
nh <- new$Nw.Hand
new$Nw.Hand <- cut(as.matrix(nh.1[,paste(i, 0:1 ,sep=".")]), seq(0, 100, 10), right = FALSE)
nh.1 <- new$Nw.Hand
new$Nw.Hand <- cut(as.matrix(nh.1[,paste(i, 0:1 ,sep=".")]), seq(0, 100, 10), right = FALSE)
new$Nw.Hand <- cut(new$Nw.Hand, seq(0, 100, 10), right = FALSE)
class(new&Nw.Hand)
typeof(new&Nw.Hand)
new$NW.Hand <- cut(new$NW.Hand, seq(0, 100, 10), right = FALSE)
typeof(new&NW.Hand)
typeof(new&NW.Hnd)
aggregate(new$Height, by = list(new$Nw.Hnd), FUN = sd)
aggregate(data.frame(new$Height), by = list(new$Nw.Hnd), FUN = sd)
aggregate.data.frame(new$Height), by = list(new$Nw.Hnd), FUN = sd)
aggregate.data.frame((new$Height), by = list(new$Nw.Hnd), FUN = sd)
aggregate(new$Height, by = list(cut(new$NW.Hnd, seq(0, 100, 10), right = FALSE)), FUN = sd)
aggregate.ts(x, 4, FUN = mean)
aggregate.ts(x, 1:4, FUN = mean)
nfrequency < 4
aggregate(new$Height, by = list(cut(new$NW.Hnd, seq(0, 100, 10), right = FALSE)), FUN = sd)
clear
library(keras)
mnist <- dataset_mnist(mnist.)
dataset_mnist()
library(keras)
library(tensorflow)
mnist <- dataset_mnist()
library(keras)
library(tensorflow)
library(reticulate)
mnist <- dataset_mnist()
install.packages(c("keras", "tensorflow"))
install.packages("devtools")
remotes::install_github("rstudio/reticulate@fix/conda-activate")
library(devtools)
devtools::install_github("rstudio/keras", dependencies = TRUE)
install.packages(c("keras", "tensorflow"))
install.packages("devtools")
remotes::install_github("rstudio/reticulate@fix/conda-activate")
library(devtools)
devtools::install_github("rstudio/keras", dependencies = TRUE)
devtools::install_github("rstudio/tensorflow", dependencies = TRUE)
library(keras)
library(tensorflow)
library(reticulate)
reticulate::conda_list()
reticulate::conda_python()
dput(val_data)
getwd
getwd()
setwd()
setwd("")
setwd("~/")
getwd()
reticulate::conda_python()
library(keras)
library(tensorflow)
library(reticulate)
mnist <- dataset_mnist()
getwd()
getwd("/Users/abdul/Desktop/Programming/R Programs/AutoEx")
getwd("/Users/abdul/Desktop/Programming/R Programs/AutoEx/")
getwd("/Users/abdul/Desktop/Programming/R Programs/AutoEx")
get_wd("/Users/abdul/Desktop/Programming/R Programs/AutoEx")
setwd("/Users/abdul/Desktop/Programming/R Programs/AutoEx")
getwd()
library(keras)
library(tensorflow)
library(reticulate)
mnist <- dataset_mnist()
library(keras)
library(tensorflow)
library(reticulate)
mnist <- dataset_mnist("~/")
library(keras)
library(tensorflow)
library(reticulate)
mnist <- dataset_mnist("~/.keras/datasets/")
mnist <- dataset_mnist()
x <- 6
class(X)
class(x)
x <- 1:3
y <- 10:12
rbind(x,y)
x <- matrix(1:6,2,3)
x
x[,2]
answer <- 10
for (j in 3:5){ answer <- j*answer}
print(answer)
x <- 0:4
as.factor(x)
x <- c("x","y","Z")
as.numeric(x)
library(keras)
library(tensorflow)
library(reticulate)
mnist <- dataset_mnist()
path.expand()
path.expand("mnist")
path.expand("~/")
library(keras)
library(tensorflow)
library(reticulate)
mnist <- dataset_mnist()
get_version(reticulate)
getwd()
reticulate::conda_version()
reticulate::use_python("/Users/abdul/opt/miniconda3/envs/r-reticulate")
reticulate::use_python(/Users/abdul/opt/miniconda3/envs/r-reticulate)
reticulate::use_condaenv("/Users/abdul/opt/miniconda3/envs/r-reticulate")
library(keras)
library(tensorflow)
library(reticulate)
mnist <- dataset_mnist()
install.packages(c("keras", "tensorflow"))
install.packages("devtools")
install.packages("remotes")
remotes::install_github("rstudio/reticulate@fix/conda-activate")
library(devtools)
devtools::install_github("rstudio/keras", dependencies = TRUE)
